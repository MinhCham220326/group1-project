// File: backend/models/User.js (ƒê√É CH·ªàNH S·ª¨A)
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs'); // Import bcrypt

const UserSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true
    },
    email: {
        type: String,
        required: true,
        unique: true // ƒê·∫£m b·∫£o email kh√¥ng tr√πng
    },
    password: {
        type: String,
        required: true // M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc
    },
    role: {
        type: String,
        enum: ['user', 'admin'], // Ch·ªâ cho ph√©p 2 gi√° tr·ªã
        default: 'user' // M·∫∑c ƒë·ªãnh l√† 'user'
    }
    // B·∫°n c√≥ th·ªÉ th√™m c√°c tr∆∞·ªùng kh√°c nh∆∞ avatar, v.v.
});

// --- M√£ h√≥a m·∫≠t kh·∫©u TR∆Ø·ªöC KHI L∆ØU ---
// ƒê√¢y l√† m·ªôt "pre-save hook" c·ªßa Mongoose
UserSchema.pre('save', async function (next) {
    // Ch·ªâ m√£ h√≥a n·∫øu m·∫≠t kh·∫©u ƒë∆∞·ª£c t·∫°o m·ªõi ho·∫∑c thay ƒë·ªïi
    if (!this.isModified('password')) {
        return next();
    }

    try {
        // T·∫°o "salt"
        const salt = await bcrypt.genSalt(10);
        // BƒÉm (hash) m·∫≠t kh·∫©u v·ªõi salt
        this.password = await bcrypt.hash(this.password, salt);
        next();
    } catch (error) {
        next(error);
    }
});

// üõ†Ô∏è D√íNG CH·ªàNH S·ª¨A ƒê·ªÇ KH·∫ÆC PH·ª§C L·ªñI OVERWRITEMODELERROR
// Ki·ªÉm tra xem m√¥ h√¨nh 'User' ƒë√£ t·ªìn t·∫°i trong mongoose.models ch∆∞a.
// N·∫øu t·ªìn t·∫°i (do nodemon ƒë√£ load), th√¨ d√πng m√¥ h√¨nh ƒë√≥.
// N·∫øu ch∆∞a, th√¨ t·∫°o m√¥ h√¨nh m·ªõi.
module.exports = mongoose.models.User || mongoose.model('User', UserSchema);